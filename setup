#!/bin/bash
set -e

error() {
    local parent_lineno="$1"
    local message="$2"
    local code="${3:-1}"
    if [[ -n "$message" ]] ; then
        echo "Error on or near line ${parent_lineno}: ${message}; exiting with status ${code}"
    else
        echo "Error on or near line ${parent_lineno}; exiting with status ${code}"
    fi
    exit "${code}"
}
trap 'error ${LINENO}' ERR

function echo_task() {
    echo -e " \e[33m*\e[39m $1"
}

function echo_sub_task() {
    echo -e "   \e[33m*\e[39m $1"
}

function check_apt_installed() {
    return dpkg -l "$1" &> /dev/null
}
function apt_install() {
    if dpkg --get-selections | grep -q "^1[[:space:]]*install$" >/dev/null; then
        echo_sub_task "$1 already installed"
    else
        echo_sub_task "Installing $1"
        sudo apt-get -qq install -y "$1"
    fi
}

# --------------------------------------------------

REPO=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

echo "Running system setup"
echo "--------------------"
echo "Home directory: $HOME"
echo "Dotfiles: $REPO"
echo ""

echo_task "Updating submodules"
git --git-dir="$REPO/.git" submodule init
git --git-dir="$REPO/.git" submodule update

if command -v apt-get > /dev/null; then
    echo_task "Installing apt packages"
    apt_install "curl"
    apt_install "htop"
    apt_install "python"
    apt_install "python-pip"
    apt_install "python3"
    apt_install "python3-pip"
    apt_install "tmux"
    apt_install "vim"
else
    echo_task "Skipping apt packages"
fi

echo_task "Setting up gnupg config"
mkdir -p "$HOME/.gnupg"
ln -sf "$REPO/gnupg/gpg.conf" "$HOME/.gnupg/gpg.conf"
ln -sf "$REPO/gnupg/scd-event" "$HOME/.gnupg/scd-event"
chmod +x "$HOME/.gnupg/scd-event"

echo_task "Setting up VIM config"
ln -sf "$REPO/vim/.vimrc" "$HOME/.vimrc"

echo_task "Setting up TMUX config"
ln -sf "$REPO/tmux/.tmux.conf" "$HOME/.tmux.conf"
if [ -z "$HOME/.tmux/plugins/tpm" ]; then
	git clone https://github.com/tmux-plugins/tpm "$HOME/.tmux/plugins/tpm"
fi

echo_task "Setup local bin"
mkdir -p "$HOME/bin"
for f in $REPO/bin/*
do
	bin_filename=$(basename "$f")
	echo_sub_task "$bin_filename"
	ln -sf "$REPO/bin/$bin_filename" "$HOME/bin/$bin_filename"
done
for f in $REPO/scripts/bin/*
do
        bin_filename=$(basename "$f")
        echo_sub_task "$bin_filename"
        ln -sf "$REPO/scripts/bin/$bin_filename" "$HOME/bin/$bin_filename"
done


echo_task "Setting up ZSH"
if check_apt_installed "fonts-powerline"; then
    echo_sub_task "Installing powerline fonts"
    sudo apt-get install -y -q fonts-powerline
    echo_sub_task "Re-building font cache"
    fc-cache -f
fi

if [ -d "$HOME/.oh-my-zsh" ]; then
	echo_sub_task "oh-my-zsh already installed"
else
	echo_sub_task "Installing oh-my-zsh"
	sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" || [ -d "$HOME/.oh-my-zsh" ]
fi
cp -r "$REPO/zsh/custom" "$HOME/.oh-my-zsh/"
cp "$REPO/zsh/.zshrc" "$HOME/.zshrc"
cp "$REPO/zsh/.zshenv" "$HOME/.zshenv"

echo_task "Setting up git"
git config --global core.editor vim  &> /dev/null
git config --global push.default current &> /dev/null


if command -v gsettings > /dev/null; then
    echo_task "Setting up gnome"
    gsettings set org.gnome.nautilus.preferences default-folder-viewer "list-view"
else
    echo_task "Skipping gnome setup"
fi


echo_task "Setting up terminator"
mkdir -p "${HOME}/.config/terminator"
cp "$REPO/terminator/config" "$HOME/.config/terminator/config"

powerline_path=$(python3 -c 'import pkgutil; print(pkgutil.get_loader("powerline").get_filename())' > /dev/null 2>&1  || true)
if [[ "$powerline_path" != "" ]]; then
	echo_task "Powerline already installed"
else
	echo_task "Setup powerline"
	pip install --user git+git://github.com/powerline/powerline
	pip3 install --user git+git://github.com/powerline/powerline
fi
ln -sf "$REPO/config/powerline" "$HOME/.config/powerline"


echo_task "Setting up gradle"
mkdir -p "$HOME/.gradle"
ln -sf "$REPO/gradle/gradle.properties" "$HOME/.gradle/gradle.properties"

echo -e "\n\e[32mSetup complete\e[39m"
